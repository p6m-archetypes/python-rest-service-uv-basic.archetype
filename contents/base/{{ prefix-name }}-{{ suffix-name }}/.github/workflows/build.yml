on:
  - push
  - workflow_dispatch

permissions: write-all

name: Build

env:
  DOCKER_REGISTRY: ${{'{'}}{ vars.ARTIFACTORY_HOSTNAME }}
  DOCKER_REPOSITORY: {{ org-name }}-{{ solution-name }}-docker-local/applications
  IMAGE_NAME: {{ prefix-name }}-{{ suffix-name }}

jobs:
  build_and_deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python and uv
        uses: p6m-actions/python-uv-setup@v1
        with:
          python-version: "3.11"

      - name: Login to Python Repository
        uses: p6m-actions/python-uv-repository-login@v1
        with:
          credentials: |
            artifactory=${{'{'}}{ secrets.ARTIFACTORY_USERNAME }}:${{'{'}}{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}

      - name: Build Python Application
        uses: p6m-actions/python-uv-build@v1
        with:
          modules: "{{ prefix-name }}-{{ suffix-name }}-api {{ prefix-name }}-{{ suffix-name }}-core {{ prefix-name }}-{{ suffix-name }}-persistence {{ prefix-name }}-{{ suffix-name }}-server {{ prefix-name }}-{{ suffix-name }}-client"
          run-tests: true

      - name: Login to Docker Repository
        uses: p6m-actions/docker-repository-login@v1
        with:
          registry: ${{'{'}}{ vars.ARTIFACTORY_HOSTNAME }}
          username: ${{'{'}}{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{'{'}}{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
      - name: Verify Docker Login
        run: |
          echo "Testing Docker authentication..."
          docker info
          echo "✅ Docker authentication successful"

      - name: Verify Registry Access
        run: |
          echo "Testing registry access..."
          echo "Registry: ${{'{'}}{ env.DOCKER_REGISTRY }}"
          echo "Repository: ${{'{'}}{ env.DOCKER_REPOSITORY }}"
          echo "Full path: ${{'{'}}{ env.DOCKER_REGISTRY }}/${{'{'}}{ env.DOCKER_REPOSITORY }}"

          # Test if we can access the registry
          if docker manifest inspect ${{'{'}}{ env.DOCKER_REGISTRY }}/${{'{'}}{ env.DOCKER_REPOSITORY }}/${{'{'}}{ env.IMAGE_NAME }}:latest >/dev/null 2>&1; then
            echo "✅ Registry access verified - repository exists and is accessible"
          else
            echo "⚠️  Repository might not exist yet - this is normal for new projects"
            echo "Attempting to create repository structure..."
          fi

      - name: Build and Publish Docker Image
        id: docker-publish
        uses: p6m-actions/python-uv-docker-publish@v1
        with:
          image-name: {{ prefix-name }}-{{ suffix-name }}-server
          image-tag: ${{'{'}}{ github.sha }}
          registry: {{ org-name }}-{{ solution-name }}-docker-local/applications
          push: true
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_CLI_EXPERIMENTAL: enabled
        continue-on-error: true

      - name: Fallback Docker Build (if p6m action fails)
        if: steps.docker-publish.outcome == 'failure'
        run: |
          echo "p6m action failed, trying standard Docker build..."

          # Build the image
          docker build -t ${{'{'}}{ env.DOCKER_REGISTRY }}/${{'{'}}{ env.DOCKER_REPOSITORY }}/${{'{'}}{ env.IMAGE_NAME }}:${{'{'}}{ github.sha }} .

          # Tag as latest
          docker tag ${{'{'}}{ env.DOCKER_REGISTRY }}/${{'{'}}{ env.DOCKER_REPOSITORY }}/${{'{'}}{ env.IMAGE_NAME }}:${{'{'}}{ github.sha }} ${{'{'}}{ env.DOCKER_REGISTRY }}/${{'{'}}{ env.DOCKER_REPOSITORY }}/${{'{'}}{ env.IMAGE_NAME }}:latest

          # Push the image
          docker push ${{'{'}}{ env.DOCKER_REGISTRY }}/${{'{'}}{ env.DOCKER_REPOSITORY }}/${{'{'}}{ env.IMAGE_NAME }}:${{'{'}}{ github.sha }}
          docker push ${{'{'}}{ env.DOCKER_REGISTRY }}/${{'{'}}{ env.DOCKER_REPOSITORY }}/${{'{'}}{ env.IMAGE_NAME }}:latest

          echo "✅ Fallback Docker build completed successfully"
        env:
          DOCKER_BUILDKIT: 1

      - name: Update Application Manifest
        uses: p6m-actions/platform-application-manifest-dispatch@v1
        with:
          repository: ${{'{'}}{ github.repository }}
          image-name: ${{'{'}}{ env.IMAGE_NAME }}
          environment: "dev"
          digest: ${{'{'}}{ steps.docker-publish.outputs.image-digest }}
          update-manifest-token: ${{'{'}}{ secrets.UPDATE_MANIFEST_TOKEN }}
          platform-dispatch-url: ${{'{'}}{ vars.PLATFORM_DISPATCH_URL }}
          directory-name: {{ prefix-name }}-{{ suffix-name }}
        if: always()