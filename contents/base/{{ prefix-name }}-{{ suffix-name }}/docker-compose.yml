version: '3.8'

services:
  "{{ prefix-name }}-{{ suffix-name }}":
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: "{{ prefix-name }}-{{ suffix-name }}"
    ports:
      - "8000:8000"  # FastAPI REST port
      - "8080:8080"  # Management HTTP port
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/{{ prefix_name }}_{{ suffix_name }}
      - LOGGING_LEVEL=INFO
      - LOGGING_FORMAT=json
      - MANAGEMENT_ENABLED=true
      - METRICS_ENABLED=true
      - METRICS_PROMETHEUS_ENABLED=true
      - JWT_SECRET_KEY=your-secret-key-here-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - "{{ prefix-name }}-{{ suffix-name }}-network"

  postgres:
    image: postgres:15-alpine
    container_name: "{{ prefix-name }}-{{ suffix-name }}-postgres"
    environment:
      - POSTGRES_DB={{ prefix_name }}_{{ suffix_name }}
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d {{ prefix_name }}_{{ suffix_name }}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - "{{ prefix-name }}-{{ suffix-name }}-network"

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: "{{ prefix-name }}-{{ suffix-name }}-prometheus"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - "{{ prefix-name }}-{{ suffix-name }}"
    restart: unless-stopped
    networks:
      - "{{ prefix-name }}-{{ suffix-name }}-network"

  grafana:
    image: grafana/grafana:10.0.0
    container_name: "{{ prefix-name }}-{{ suffix-name }}-grafana"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - "{{ prefix-name }}-{{ suffix-name }}-network"

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  "{{ prefix-name }}-{{ suffix-name }}-network":
    driver: bridge